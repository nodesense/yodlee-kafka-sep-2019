/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.workshop.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Invoice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -385620332606607685L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Invoice\",\"namespace\":\"kafka.workshop.models\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"invoiceDate\",\"type\":\"long\",\"logicalType\":\"Timestamp\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Invoice> ENCODER =
      new BinaryMessageEncoder<Invoice>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Invoice> DECODER =
      new BinaryMessageDecoder<Invoice>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Invoice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Invoice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Invoice>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Invoice to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Invoice from a ByteBuffer. */
  public static Invoice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String id;
  @Deprecated public int qty;
  @Deprecated public int amount;
  @Deprecated public java.lang.String customerId;
  @Deprecated public java.lang.String state;
  @Deprecated public java.lang.String country;
  @Deprecated public long invoiceDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Invoice() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param qty The new value for qty
   * @param amount The new value for amount
   * @param customerId The new value for customerId
   * @param state The new value for state
   * @param country The new value for country
   * @param invoiceDate The new value for invoiceDate
   */
  public Invoice(java.lang.String id, java.lang.Integer qty, java.lang.Integer amount, java.lang.String customerId, java.lang.String state, java.lang.String country, java.lang.Long invoiceDate) {
    this.id = id;
    this.qty = qty;
    this.amount = amount;
    this.customerId = customerId;
    this.state = state;
    this.country = country;
    this.invoiceDate = invoiceDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return qty;
    case 2: return amount;
    case 3: return customerId;
    case 4: return state;
    case 5: return country;
    case 6: return invoiceDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: qty = (java.lang.Integer)value$; break;
    case 2: amount = (java.lang.Integer)value$; break;
    case 3: customerId = (java.lang.String)value$; break;
    case 4: state = (java.lang.String)value$; break;
    case 5: country = (java.lang.String)value$; break;
    case 6: invoiceDate = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'qty' field.
   * @return The value of the 'qty' field.
   */
  public java.lang.Integer getQty() {
    return qty;
  }

  /**
   * Sets the value of the 'qty' field.
   * @param value the value to set.
   */
  public void setQty(java.lang.Integer value) {
    this.qty = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Integer getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Integer value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.String value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'invoiceDate' field.
   * @return The value of the 'invoiceDate' field.
   */
  public java.lang.Long getInvoiceDate() {
    return invoiceDate;
  }

  /**
   * Sets the value of the 'invoiceDate' field.
   * @param value the value to set.
   */
  public void setInvoiceDate(java.lang.Long value) {
    this.invoiceDate = value;
  }

  /**
   * Creates a new Invoice RecordBuilder.
   * @return A new Invoice RecordBuilder
   */
  public static kafka.workshop.models.Invoice.Builder newBuilder() {
    return new kafka.workshop.models.Invoice.Builder();
  }

  /**
   * Creates a new Invoice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Invoice RecordBuilder
   */
  public static kafka.workshop.models.Invoice.Builder newBuilder(kafka.workshop.models.Invoice.Builder other) {
    return new kafka.workshop.models.Invoice.Builder(other);
  }

  /**
   * Creates a new Invoice RecordBuilder by copying an existing Invoice instance.
   * @param other The existing instance to copy.
   * @return A new Invoice RecordBuilder
   */
  public static kafka.workshop.models.Invoice.Builder newBuilder(kafka.workshop.models.Invoice other) {
    return new kafka.workshop.models.Invoice.Builder(other);
  }

  /**
   * RecordBuilder for Invoice instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Invoice>
    implements org.apache.avro.data.RecordBuilder<Invoice> {

    private java.lang.String id;
    private int qty;
    private int amount;
    private java.lang.String customerId;
    private java.lang.String state;
    private java.lang.String country;
    private long invoiceDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.workshop.models.Invoice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qty)) {
        this.qty = data().deepCopy(fields()[1].schema(), other.qty);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.customerId)) {
        this.customerId = data().deepCopy(fields()[3].schema(), other.customerId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.state)) {
        this.state = data().deepCopy(fields()[4].schema(), other.state);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.invoiceDate)) {
        this.invoiceDate = data().deepCopy(fields()[6].schema(), other.invoiceDate);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Invoice instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.workshop.models.Invoice other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qty)) {
        this.qty = data().deepCopy(fields()[1].schema(), other.qty);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.customerId)) {
        this.customerId = data().deepCopy(fields()[3].schema(), other.customerId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.state)) {
        this.state = data().deepCopy(fields()[4].schema(), other.state);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.invoiceDate)) {
        this.invoiceDate = data().deepCopy(fields()[6].schema(), other.invoiceDate);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'qty' field.
      * @return The value.
      */
    public java.lang.Integer getQty() {
      return qty;
    }

    /**
      * Sets the value of the 'qty' field.
      * @param value The value of 'qty'.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder setQty(int value) {
      validate(fields()[1], value);
      this.qty = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'qty' field has been set.
      * @return True if the 'qty' field has been set, false otherwise.
      */
    public boolean hasQty() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'qty' field.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder clearQty() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Integer getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder setAmount(int value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder clearAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }

    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder setCustomerId(java.lang.String value) {
      validate(fields()[3], value);
      this.customerId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.String getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder setState(java.lang.String value) {
      validate(fields()[4], value);
      this.state = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder clearState() {
      state = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder setCountry(java.lang.String value) {
      validate(fields()[5], value);
      this.country = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder clearCountry() {
      country = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'invoiceDate' field.
      * @return The value.
      */
    public java.lang.Long getInvoiceDate() {
      return invoiceDate;
    }

    /**
      * Sets the value of the 'invoiceDate' field.
      * @param value The value of 'invoiceDate'.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder setInvoiceDate(long value) {
      validate(fields()[6], value);
      this.invoiceDate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'invoiceDate' field has been set.
      * @return True if the 'invoiceDate' field has been set, false otherwise.
      */
    public boolean hasInvoiceDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'invoiceDate' field.
      * @return This builder.
      */
    public kafka.workshop.models.Invoice.Builder clearInvoiceDate() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Invoice build() {
      try {
        Invoice record = new Invoice();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.qty = fieldSetFlags()[1] ? this.qty : (java.lang.Integer) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.Integer) defaultValue(fields()[2]);
        record.customerId = fieldSetFlags()[3] ? this.customerId : (java.lang.String) defaultValue(fields()[3]);
        record.state = fieldSetFlags()[4] ? this.state : (java.lang.String) defaultValue(fields()[4]);
        record.country = fieldSetFlags()[5] ? this.country : (java.lang.String) defaultValue(fields()[5]);
        record.invoiceDate = fieldSetFlags()[6] ? this.invoiceDate : (java.lang.Long) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Invoice>
    WRITER$ = (org.apache.avro.io.DatumWriter<Invoice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Invoice>
    READER$ = (org.apache.avro.io.DatumReader<Invoice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
